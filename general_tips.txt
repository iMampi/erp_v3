  /*
  JS
    let j1="2021-02-30";
    let j2="2022-03-30";
    console.log(luxon.DateTime.fromFormat(j1,"yyyy-MM-dd"));
    console.log(luxon.DateTime.fromFormat(j1,"yyyy-MM-dd").toLocaleString());
    console.log(luxon.DateTime.fromFormat(j2,"yyyy-MM-dd"));
    console.log(luxon.DateTime.fromFormat(j2,"yyyy-MM-dd").toLocaleString());
    console.log(`j is ${dateField.value} ${validateDate(dateField)}`);
    // console.log(`j2 is ${j2} ${validateDate(j2)}`);
    */

  /*    
  JS
    ////example of different option to check on class. 
    activeRowElements.forEach(el=>{console.log(el.value);})

    //here,we look by string for a substring
    activeRowElements.forEach(el=>{console.log(el.getAttribute("class"));
        console.log(el.getAttribute("class").includes('income'));
    })

    //here, we get an Array, an we check an element into this array obtained
    //note : contains est cune method de classList. ne fonctionne pas avec une array (use includes)
    activeRowElements.forEach(el=>{console.log(el.classList);
        console.log(el.classList.contains("income"));
    })
    */

  /*
  js
    //example of how to grab just the date class IN .row.active  (we use space)
    const dateField=document.querySelector(".row.active .date");
    console.log(dateField);
    */

js
The keydown event is fired when a key is pressed. 
Unlike the keypress event, the keydown event is fired for all keys, regardless of whether they produce a character value. 
The keydown and keyup events provide a code indicating which key is pressed, while keypress indicates which character was entered.


php

!!!! NEW!!!!
just add this tag at the start of of every base html file :

<meta http-equiv="Content-Type" content="text/html" charset="utf-8" />

but remove "utf8_decode()" when echoing the result;
it will also ouput the meta tag,so if you dont want to ouput the meta tag, just ouput the rest. if using DOMDocument, use the method childNodes[1];

!!!!!!!!

encoding problem even with
$dom = new DOMDocument("1.0","utf-8");

reason :
  DOMDocument::loadHTML will treat your string as being in ISO-8859-1 (the HTTP/1.1 default character set) unless you tell it otherwise. This results in UTF-8 strings being interpreted incorrectly.
  The DOM extension was built on libxml2 whose HTML parser was made for HTML 4 - the default encoding for which is ISO-8859-1. Unless it encounters an appropriate meta tag or XML declaration stating otherwise loadHTML() will assume the content is ISO-8859-1.
  Specifying the encoding when creating the DOMDocument as you have does not influence what the parser does - loading HTML (or XML) replaces both the xml version and encoding that you gave its constructor.
and
  The problem is with saveHTML() and saveXML(), both of them do not work correctly in Unix. They do not save UTF-8 characters correctly 

solution :
do not work with $dom->loadHTMLFile(). you must use second option;
  instead of just :
    $dom->loadHTML($mystring);
  we convert  
    $dom->loadHTML(mb_convert_encoding($mystring, 'HTML-ENTITIES', 'UTF-8'));

OR

  instead of just :
    $dom->saveHTML;
  do 
    echo utf8_decode($dom->saveHTML($dom->documentElement));
  see usefultipsalongtheway.txt for explaination


CSS 
whenever you put two or more element together in the same container (div, or td or tr or etc..)
use css :
white-space: nowrap;
or just add nowrap into the tag:
<td nowrap>

OR using bootstrap's class (see documentation fro more)
<td class="d-flex flex-nowrap>"
or (according to case use)
<td class="input-group">
<td class="btn-group">
--------------------------
MODAL CUSTOMISATION
#cache the bootsrap modal. use the modal's id here
var modal2 = new bootstrap.Modal(document.getElementById("modal-creer-tiers-affect"), {
  keyboard: false
})

#for async
    const promise1 = new Promise((resolve, reject) => {
        bsModalChooseNew.hide();
        resolve(true);
    });

#pour r√©gler le probleme de double backdrop qui bloque tout
mod.addEventListener('hidden.bs.modal', function (event) {
  let q=document.querySelectorAll('.modal-backdrop');
for ( let m of q){
    m.parentElement.removeChild(m);
}
})
--------------------
php
redirection
<?php
/* Redirect to a different page in the current directory that was requested */
$host  = $_SERVER['HTTP_HOST'];
$uri   = rtrim(dirname($_SERVER['PHP_SELF']), '/\\');
$extra = 'mypage.php';
header("Location: http://$host$uri/$extra");
exit;
?>
----------------------
php
autoload, namespaced fucntions :

From PHP 5.6 and higher you can import/use functions from other PHP files as follows:

require_once __DIR__ . "/../../path/to/your/vendor/autoload.php";
use function myprogram\src\Tools\MyFunc;
//use the imported function
MyFunc();
However, for PHP 7.0, I needed to add the function to "files" in the composer.json:

"autoload" : {
    "psr-4" : {
      "myprogram\\src\\" : "myprogram/src/"
    },
"files" : [
      "myprogram/src/Tools/ScriptWithMyFunc.php"
    ]
And then run composer dump-autoload to update autoload.php.

ALTERNATIVELY:

You can also import functions from scripts directly without composer:

require_once full\path\to\ScriptWithMyFunc.php;
MyFunc();
But (at least for me) this only works when ScriptWithMyFunc.php does not have a namespace.
---------------------------
js
dom disabled input:
you can use either 
input.setAttribute() or input.disabled=true
The following input elements are all disabled:
<input disabled />
<input disabled="" />
<input disabled="disabled" />
<input disabled="true" />
<input disabled="false" /> <!-- still disabled! -->

but to remove "disabled", to make input active, you can onl
y use input.disabled=true.
------------------
html, bootsrap svg icons
change height and width to 20-20
and viewBox to "0 0 20 20"

that is the main idea. just tweak those value to your convenience.
--------------------
bootstrap modal show/hide 
modal since i initialy use data attributes to show the modal, the js methods wont work. In order for the js method to work, you must use JS to show first the modal. (see notes in general tips)
but if you still use data attribute s to fire modal, you gotta use a custom js for it to work as expected.

function hideModal(modalId) {
	// note : modal since i initialy use data attributes to show the modal, the js methods wont work. In order for the js method to work, you must use JS to show first the modal. (see notes in general tips)
	let myModalEl = document.getElementById(modalId);
	let myModal = new bootstrap.Modal(myModalEl);
	myModalEl.classList.remove("show");
	console.log(document.querySelector(".modal-backdrop"));
	document.querySelector(".modal-backdrop").remove();
	document.body.classList.remove("modal-open");
	document.body.style.removeProperty("overflow");
	document.body.style.removeProperty("padding-right");
	myModal.hide();
}
https://stackoverflow.com/questions/23677765/bootstrap-modal-hide-is-not-working
and rad the documentation


//jquery autocompleteu///

if i use hash, autocomplete only handle those key:
"label" and "value".
label : what is going to be shown in the suggestion list;
value : what is going to be put into the input

if the json you use have other keys different from label and value (eg: "code"), that you still need. you can still use it on select : like this :

$( "#autocomplete" ).autocomplete({

	source: "http://mymanager.local/database/select/autocomplete_test.php",
	minLength: 2,
	select: function (event,ui) {
		console.log("selected");
		console.log(ui.item.label);
		console.log(ui.item.value);
		console.log(ui.item.code);
	}
});

add this style to get the loading icon:
<style>
  .ui-autocomplete-loading {
    background: white url("images/spinner-v2-24px.gif") right center no-repeat;
  }
<style>

base the input on the template

for more complexe things using ajax
NOTE : change "jsonp" to "json"
<script>
  $(function() {
    function log( message ) {
      $( "<div>" ).text( message ).prependTo( "#log" );
      $( "#log" ).scrollTop( 0 );
    }

    $( "#city" ).autocomplete({
      source: function( request, response ) {
        $.ajax({
          url: "http://gd.geobytes.com/AutoCompleteCity",
          dataType: "jsonp",
          data: {
            q: request.term
          },
          success: function( data ) {
            response( data );
          }
        });
      },
      minLength: 3,
      select: function( event, ui ) {
        log( ui.item ?
          "Selected: " + ui.item.label :
          "Nothing selected, input was " + this.value);
      },
      open: function() {
        $( this ).removeClass( "ui-corner-all" ).addClass( "ui-corner-top" );
      },
      close: function() {
        $( this ).removeClass( "ui-corner-top" ).addClass( "ui-corner-all" );
      }
    });
  });
</script>

something might worth exploring

   $(function() {
      $("#LookUp").autocomplete({                
            source: function (request, response) {
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "SampleWM.aspx/GetAutoCompleteData",
                    dataType: "json",
                    data:'{QueryFilter: "' + request.term  + '"}',
                    success: function (data) {
                        response($.map($.parseJSON(data.d), function (item) {                                
                            var AC = new Object();

                            //autocomplete default values REQUIRED
                            AC.label = item.Field0;
                            AC.value = item.Field1;

                            //extend values
                            AC.FirstName = item.Field2;
                            AC.LastName = item.Field3;
                            AC.Age = item.Field4;
                            AC.Phone = item.Field5;

                            return AC
                        }));       
                    }                                             
                });
            },
            minLength: 3,
            select: function (event, ui) {                    
                $("#txtFirstName").val(ui.item.FirstName);
                $("#txtLastName").val(ui.item.LastName);
                $("#ddlAge").val(ui.item.Age);
                $("#txtPhone").val(ui.item.Phone);
             }                    
        });
     });



///////////
input text number only
there direferent way. those below work with keypress event. But keypress is decapreting gonna dissapear. use keydown or beforeinput

<input type="text" pattern="\d*" onkeypress="return event.charCode>=45 && event.charCode<=57"/>

<input id="input3" type="text" pattern="\d*" onkeypress="return isNumberKey(event)"/>

function isNumberKey(evt) {
  var charCode = (evt.which) ? evt.which : evt.keyCode
  if (charCode > 31 && (charCode < 48 || charCode > 57))
    return false;
  return true;
}
OR

function isNumberKey(evt) {
  if(!isNaN(evt.key)||["Backspace","Enter"].includes(evt.key)){
    return true;
  }
  return false;
}

when using keydown, difference is event.keyCode() treat differently num and numpad's num.

U can also implement this restriction with JS eventlistener. but instea of return false, you use event.preventDefault() instead.

function isNumberKey(evt) {
  if(!isNaN(evt.key)||["Backspace","Enter"].includes(evt.key)){
    return true;
  }
  evt.preventDefault();
}

document.getElementById("input2").addEventListener("keydown",(event)=>{
console.log(event);
isNumberKey(event)})

//////////////
when input is invalid when u use pattern, the css selector is 
input:invalid,
 {
  border: red solid 3px;
}


//////////////
[XDebug]
xdebug.mode=debug
xdebug.start_with_request=yes
xdebug.client_port=9003
xdebug.client_host = localhost
zend_extension=C:\xampp\php\ext\php_xdebug.dll
edit laucnch.json file to change pot to 9003
////////////////


bootstrap vertical alignement:
use .col-form-label only with label tag (check documentaion) with my-auto on next div to align with label. only works for 1 field per row. not mutilple fields in one row. 
but i prefer using .align-self-center when using any other tag. it solves it all


css height of row (elements\avoirs_clt\avoir_clt_header_based_base.html):
<div id="clt-selection" class="row  my-auto py-1">

		<span class="align-self-center col-2 lh-1">client ID</span>
		<div class="col-10 my-auto " >
			<div class="dropdown btn-group d-flex" role="group">
				<button class="btn btn-sm input client btn-secondary  dropdown-toggle right-corners w-100 text-start" type="button" data-bs-toggle="dropdown" aria-expanded="false" id="fact-origin" >
					Select Client
				</button>

				<ul class="dropdown-menu " id="client-list">
					<li id="search-container">
						<div class="px-2 pb-2">
							<input  type="text" placeholder="Search" id="search-client" autocomplete="off" class="form-control form-control-sm">               
						</div>
					</li>
				</ul>
				<button class="mytbn btn btn-sm btn-success text-center left-corners form-control-sm"type="button" id="btn-see-client">
					see</button>
		
        	</div>
			<input type="hidden" class="input client-uid" disabled id="client-uid"/>

        </div>
	</div>

i use .form-control-sm  in #btn-see-client just to uniform the height of each row.

/////////////////////
PHP has already greate array functions.
like this one :
array_search($item["category_uid"], array_column($all_categories_name, "uid"));

array_search ‚Äî Searches the array for a given value and returns the first corresponding key if successful

array_column ‚Äî Return the values from a single column in the input array

by combining those 2, we can search for the key of value in a multidimensional array

//////////////////
XPATH for queryselector
select tag button with textContent "XPath tester":
//button[contains(.,"XPath tester")]